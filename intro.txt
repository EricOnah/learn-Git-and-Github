# This is a git crash course for self

git init: to initialize a repository. This will make Git track the activities in that folder. Once the folder is created
initialized, you should not run this command again in the child folders.

git status: to check the status of a repository or if there's a repo at all.

to remove git repo from the directory, delete the .git directory.

code: ls -a #to see hidden files and directories
        rm -rf .git #to remove the git directory

#Once done, git no longer tracks the folder.

#Best practice will be to only initialize project directories individually.



git commit: check point in time. As you work can commit different changes to your file or project and have it saved 
on github with a description of the changes.

3 things here:
Working directory: Folder where you work is saved on

Staging area: Where the selected files you want to commit are kept before commit. code: git add
you can also use code: git stage filename  #to add files in the staging area.
to remove file or files from the staging area - code: git rm --cached filename. or git restore --staged filename.
If there is a change in the staged file and the one in the working directory, the removed command will not be executed.
Two things you can do in this case:
- Stage the file again and and run the git rm command again
- force remove the file by running git rm command with -f. Code: rm --cached -f "filename"

Repository: the .git folder that was created when you initialized git. This is where the files in the staging area area
gets added once you commit. code: git commit

commit message: commit message carries information about the files or changes that you made in the file that is about to be
to be committed. code: git commit -m "#commit message"

##more git add and git commit commands


git add . ##stage all changes in the folder at once
git add <path> : Use git add to stage a specific file or directory.
git add -p : Use an interactive mode to choose which hunks of changes to stage.



##keep each commit focused on a single change (Atomic Commit)
##to get more options visit - https://git-scm.com/docs


##GIT log
displays information about the commit. code: git log

to have it display in one line - code: git log --oneline

##to get more options visit - https://git-scm.com/docs



##Amending mistakes in commit

If you omitted a file or had typo in commit message, you can amend it.
Stage in the file you forgot to add and run the code below
code: git commit --amend
In the file that will open in your code editor, you can edit the commit message, check if the new file has been 
added then close the file.
##this is only used to amend the last commit not 2 or 3 commits earlier

To amend earlier commits use git rebase. code: git rebase -i HEAD~n (number of commits) if n is 3, it will display the
last 3 commits.


##GIT IGNORE HEAD

To make git not track every file in your project you can use the .gitignore file to hide these files and folders
from git.

you can add file extension e.g .txt or folder ignore_this/

for files to ignore while working on a project visit: https://www.toptal.com/developers/gitignore/



##Branches (Alternative timelines) - Alternative timeline where you can work on the project but in a different timeline 
that the main branch or the parent branch is not affected by the changes you make in the new branch.

##HEAD = current branch

to see current branches - code: git branch
if there is more than one branch, the branch name with * is the branch you are on.
 
To create a new branch - code: git branch <branch-name> ##this doesn't switch you to the branch just creates.

To switch to a new branch - code: git switch <branch-name>

##changes committed to a branch can only be seen when on that branch.